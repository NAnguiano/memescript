MemeScript {
  Program          =  Block
  Block            =  (Stmnt)+

  Stmnt            =  ConstDec                                         -- constdec
                   |  VarDec                                           -- vardec
                   |  FunDec                                           -- fundec
                   |  If                                               -- if
                   |  While                                            -- while
                   |  For                                              -- for
                   |  TryCatch                                         -- trycatch
                   |  TryCatchFinally                                  -- trycatchfinally
                   |  Switch                                           -- switch
                   |  Call                                             -- funcall
                   |  Assignment                                       -- assignment
                   |  Return                                           -- return
                   |  Print                                            -- print

  Body             =  "{" Block? "}"

  ConstDec         =  "overlyattachedgirlfriend.jpg" id ";"
  VarDec           =  "ermahgerd" id ";"

  ObjDec           =  "wow" id "{" Constructor ObjMethods* "}"
  Constructor      =  "such" "(" Params ")" Body
  ObjMethods       =  "so" id "(" Params ")" Body

  FunDec           =  "you" id "(" Params ")" "me, an intellectual" Body

  If               =  "I don't always" "(" Exp ")" "but when I do" Body (ElseIf)* (Else)?
  ElseIf           =  "but sometimes I" "(" Exp ")" Body
  Else             =  "otherwise I do" Body

  While            =  "yo, I'mma let you finish" "(" Exp ")" "but" Body

  For              =  "one does not simply" Body "without" "(" VarDec ";" Exp ";" Exp ")"

  TryCatch         =  "Chuck Norris doesn't" Body "he" Body
  TryCatchFinally  =  "Chuck Norris doesn't" Body "or" Body "he" Body

  Switch           =  "this is bill" "(" id ")" "{" (SwitchCase SwitchBody)* Default "}"

  SwitchCase       =  "bill has a" Literal | "bill is a" Literal
  SwitchBody       =  "{" Block? "be like bill;" "}"
  Default          =  "bill is smart" SwitchBody

  Return           =  "i can haz" Exp ";"
  Print            =  "dicks.out" "(" Exp ")" ";"

  Exp              =  NonemptyListOf<Exp1, "||">
  Exp1             =  NonemptyListOf<Exp2, "&&">
  Exp2             =  Exp3 (relop Exp3)?
  Exp3             =  NonemptyListOf<Exp4, addop>
  Exp4             =  NonemptyListOf<Exp5, mulop>
  Exp5             =  prefixop? Exp6
  Exp6             =  Literal
                   |  Var
                   |  "(" Exp ")"                                      -- parens

  Literal          =  "null"
                   |  "true"
                   |  "false"
                   |  strlit
                   |  numlit

  Assignment       =  id "=" Exp ";"
  Call             =  id "(" Args ")" ";"

  Args             =  ListOf<Exp, ",">
  Var              =  Var "[" Exp "]"                                  -- subscript
                   |  Var "." id                                       -- select
                   |  Call
                   |  id

  Params           =  ((Param | OptionalParam) ("," (Param | OptionalParam))* ("," SplatParam)?)?

  Param            = id
  OptionalParam    = id "=" Exp
  SplatParam       = id "..."

  mulop            =  "*" | "/" | "%"
  prefixop         =  "!" | "-"
  relop            =  "<=" | "<" | "==" | "===" | "!=" | ">=" | ">"
  addop            =  "+" | "-"

  char             =  escape
                   |  ~"\n" ~"\"" ~"'" any

  strlit           =  "\"" char* "\"" | "'" char* "'"
  intlit           =  digit+
  floatlit         =  digit+ "." digit+
  numlit           =  intlit | floatlit

  escape           =  "\\n" | "\\\"" | "\\'"

  keyword          =  ("you" | "but" | "without" | "ermahgerd" | "he" | "wow" | "such" | "very"
                      | "so" | "much" | "dicks" | "false" | "true" | "null" | "undefined") ~idrest

  id               =  ~keyword letter idrest*
  idrest           =  "_" | alnum
}
