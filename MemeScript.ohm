MemeScript {

  Program           =  FunctionBody
  FunctionBody      =  (Statement"kappa")+
  Statement         = FunctionDeclare
  						      |TypeDeclare
                    |Loop
                    |Print
                    |Return
  FunctionDeclare   = "you: an " VarName "(" (VarName ("," VarName)*)* ")" "kappa"
  FunctionCall      =  VarName "(" (VarName ("," VarName)*)* ")" "kappa"
  TypeDeclare       = "This is" type VarName "kappa"
  Return 			      =	"me, an intellectual: " VarName "kappa"
  						      |		"me, an intellectual: " FunctionCall "kappa"
  Loop              = "yo, I'mma let you finish ("  boolean  "): \n but:" FunctionBody "kappa"
                    | "yo, I'mma let you finish ("  numb  "): \n but:" FunctionBody "kappa"
  
  Exp               =  Exp "I don't always " "("Exp "):" "but when I do:" FunctionBody "kappa"
  Exp2              =  Exp2 addop Exp3                 -- binary
                    |  Exp3
  Exp3              =  Exp3 mulop Exp4                 -- binary
                    |  Exp4
  Exp4              =  prefixop Exp5                   -- unary
                    |  Exp5
  Exp5              =  postfixop Exp6                  -- unary
                    |  Exp6
  Exp6              =  numb
                    |  string
                    |  VarName
                    |  FunctionCall
                    |  "(" Exp ")"                     -- parens
  VarName            =  id

  keyword           =  (boolean|type|"kappa" | "This is" | "me, an intellectual: " | "you: an " |) ~varusable
  type              =  ("boolean", "numblit", "string", "unicode")
  id                =  ~keyword varstart varusable*
  varstart          =  letter
  varusable         =  letter | digit 

  string            =  doublequote strusable* doublequote
  numb              =  digit+
  boolean           = ("true"|"false")

  strusable         =  any | escapesingquote | escapedoubquote | escaper | escapen | escapeescape | escapeunicode | doublequote
  unicode           =  hex hex hex hex 
  hex               =  digit | "a" | "b" | "c" | "d" | "e" | "f"

  backslash         =  "\\"
  doublequote       =  "\""
  singlequote       =  "\'"
  
  escapesingquote   = backslash singlequote
  escapedoubquote   = backslash doublequote
  escaper           = backslash "r"
  escapen           = backslash "n"
  escapeescape      = backslash backslash

  addop             =  "+" | "-"
  mulop             =  "*" | "/"
  prefixop          =  "-"
  postfixop         =  "!"

  comment           =  "--" (~"\n" any)* "\n"
}